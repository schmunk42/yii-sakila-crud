<?php

/**
 * This is the model base class for the table "inventory".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Inventory".
 *
 * Columns in table "inventory" available as properties of the model,
 * followed by relations of table "inventory" available as properties of the model.
 *
 * @property integer $inventory_id
 * @property integer $film_id
 * @property integer $store_id
 * @property string $last_update
 *
 * @property Store $store
 * @property Film $film
 * @property Rental[] $rentals
 */
abstract class BaseInventory extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'inventory';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Inventory|Inventories', $n);
	}

	public static function representingColumn() {
		return 'last_update';
	}

	public function rules() {
		return array(
			array('film_id, store_id, last_update', 'required'),
			array('film_id, store_id', 'numerical', 'integerOnly'=>true),
			array('inventory_id, film_id, store_id, last_update', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'store' => array(self::BELONGS_TO, 'Store', 'store_id'),
			'film' => array(self::BELONGS_TO, 'Film', 'film_id'),
			'rentals' => array(self::HAS_MANY, 'Rental', 'inventory_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'inventory_id' => Yii::t('app', 'Inventory'),
			'film_id' => null,
			'store_id' => null,
			'last_update' => Yii::t('app', 'Last Update'),
			'store' => null,
			'film' => null,
			'rentals' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('inventory_id', $this->inventory_id);
		$criteria->compare('film_id', $this->film_id);
		$criteria->compare('store_id', $this->store_id);
		$criteria->compare('last_update', $this->last_update, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}